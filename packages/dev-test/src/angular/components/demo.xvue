import { Component, Inject, InjectionToken, Optional, SkipSelf } from "vue-plus";
import { ref } from "vue";
import type { LifecycleHook } from "vue-plus";
import CommunityIcon from "./IconCommunity.vue";
import { Injectable } from "vue-plus";


@Injectable()
class RootClassK {

  public update() {

  }

  private pMethod() {
  }
}

@Injectable()
class RootClassK2 {

  public update() {

  }

  constructor(public root: RootClassK) {
    console.log(root);
  }

  private pMethod() {
  }
}

class ClassK {

  public update() {

  }

  private pMethod() {
  }
}

const demoToken = InjectionToken<ClassK>();

@Component({
  styleUrls: ["./demo.less"],
  components: [
    CommunityIcon
  ],
  template: `
    <div>{{ x }}</div>
    <div>{{ y }}</div>
    <CommunityIcon></CommunityIcon>
  `,
  providers: [
    { provide: demoToken, useClass: ClassK }
  ]
})
export default class AngularDemo implements LifecycleHook {
  x = ref(0);
  y = ref(0);

  props = defineProps({
    k: {}
  });

  private update = (event: MouseEvent) => {
    this.x.value = event.x;
    this.y.value = event.y;
  };

  constructor(@Optional() @Inject(demoToken) public demoData: ClassK, @Optional() private root: RootClassK2) {
    console.log(demoData, root);
  }

  private pMethod() {
  }

  onMounted(): void {
    console.log(this.demoData);
    window.addEventListener("mousemove", this.update);
  }

  onUnmounted(): void {
    window.removeEventListener("mousemove", this.update);
  }
}
